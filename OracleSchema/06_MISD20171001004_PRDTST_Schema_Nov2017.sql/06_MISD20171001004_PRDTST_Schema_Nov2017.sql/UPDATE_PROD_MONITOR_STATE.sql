--------------------------------------------------------
--  DDL for Trigger UPDATE_PROD_MONITOR_STATE
--------------------------------------------------------

  CREATE OR REPLACE TRIGGER "HUBADMIN"."UPDATE_PROD_MONITOR_STATE" 
AFTER INSERT ON PM_RFID_RAW_EVENTS
FOR EACH ROW
    DECLARE     
    SCANNERIP VARCHAR2(20 BYTE);
    SCANNERID VARCHAR2(20 BYTE); -- not used refer to BEFORE UPDATE TRIGGER
    CURRENT_STATE_PM NUMBER(2,0);
    NEXT_STATE_RULE VARCHAR2(20 BYTE);
    EVENT_RAISEDDATECOLUMN VARCHAR2(50 BYTE);
    statecount int := 0;
    SCANTIME DATE;
    UPDATEDATE  DATE;
BEGIN  
      -- GET THE DEVICEIP AND COMPARE  WITH THE PM_DEVICE_MAP 
    SELECT LOCATION_STATUS INTO CURRENT_STATE_PM FROM PROD_MONITOR WHERE ID_NO = :NEW.IDNO; 
    
    SELECT count(*) INTO statecount FROM PM_FSM_RULES  WHERE SCANNER_ID = :NEW.SCANNER_ID and CURRENTSTATE = CURRENT_STATE_PM;
    
    /* UTC date */
    SCANTIME := :NEW.SCAN_TIMESTAMP - 1/24;
    UPDATEDATE := SYSDATE - 1/24;
     
  IF (statecount > 0 )  THEN   
   SELECT NEXTSTATE,EVENT_RAISED_DATECOLUMN INTO NEXT_STATE_RULE,EVENT_RAISEDDATECOLUMN FROM PM_FSM_RULES  
    WHERE SCANNER_ID = :NEW.SCANNER_ID   and CURRENTSTATE = CURRENT_STATE_PM;    
    --Update the state in LOCATION_STATUS column and all event state date of PROD_MONITOR table with SCAN_TIMESTAMP column of PM_RFID_RAW_EVENTS TABLE
       CASE
       WHEN EVENT_RAISEDDATECOLUMN = 'CHASSIS_LINE_START_DATE' 
       THEN 
        UPDATE PROD_MONITOR SET LOCATION_STATUS = NEXT_STATE_RULE,CHASSIS_LINE_START_DATE=SCANTIME, 
        UPDATE_DATE = UPDATEDATE, UPDATE_BY = :NEW.SCANNER_ID
        WHERE ID_NO = :NEW.IDNO; 

       WHEN EVENT_RAISEDDATECOLUMN = 'CHASSIS_LINE_END_DATE' 
       THEN 
        UPDATE PROD_MONITOR SET LOCATION_STATUS = NEXT_STATE_RULE,CHASSIS_LINE_END_DATE=SCANTIME, 
        UPDATE_DATE = UPDATEDATE, UPDATE_BY = :NEW.SCANNER_ID    
        WHERE ID_NO = :NEW.IDNO;

       WHEN EVENT_RAISEDDATECOLUMN = 'PAINT_LINE_START_DATE' 
       THEN
       UPDATE PROD_MONITOR SET LOCATION_STATUS = NEXT_STATE_RULE,PAINT_LINE_START_DATE=SCANTIME, 
        UPDATE_DATE = UPDATEDATE, UPDATE_BY = :NEW.SCANNER_ID    
        WHERE ID_NO = :NEW.IDNO;         
 
       WHEN EVENT_RAISEDDATECOLUMN = 'PAINT_LINE_END_DATE' 
       THEN 
        UPDATE PROD_MONITOR SET LOCATION_STATUS = NEXT_STATE_RULE,PAINT_LINE_END_DATE=SCANTIME, 
        UPDATE_DATE = UPDATEDATE, UPDATE_BY = :NEW.SCANNER_ID  
        WHERE ID_NO = :NEW.IDNO; 

       WHEN EVENT_RAISEDDATECOLUMN = 'TRACTOR_LINE_START_DATE' 
       THEN 
        UPDATE PROD_MONITOR SET LOCATION_STATUS = NEXT_STATE_RULE,TRACTOR_LINE_START_DATE=SCANTIME, 
        UPDATE_DATE = UPDATEDATE, UPDATE_BY = :NEW.SCANNER_ID    
        WHERE ID_NO = :NEW.IDNO;

       WHEN EVENT_RAISEDDATECOLUMN = 'TRACTOR_LINE_END_DATE' 
       THEN 
        UPDATE PROD_MONITOR SET LOCATION_STATUS = NEXT_STATE_RULE,TRACTOR_LINE_END_DATE=SCANTIME, 
        UPDATE_DATE = UPDATEDATE, UPDATE_BY = :NEW.SCANNER_ID    
        WHERE ID_NO = :NEW.IDNO; 
        
       WHEN EVENT_RAISEDDATECOLUMN = 'REWORK_BEFORE_MQ_START_DATE' 
       THEN 
        UPDATE PROD_MONITOR SET LOCATION_STATUS = NEXT_STATE_RULE,REWORK_BEFORE_MQ_START_DATE=SCANTIME, 
        UPDATE_DATE = UPDATEDATE, UPDATE_BY = :NEW.SCANNER_ID  
        WHERE ID_NO = :NEW.IDNO; 

       WHEN EVENT_RAISEDDATECOLUMN = 'REWORK_BEFORE_MQ_END_DATE' 
       THEN 
        UPDATE PROD_MONITOR SET LOCATION_STATUS = NEXT_STATE_RULE,REWORK_BEFORE_MQ_END_DATE=SCANTIME, 
        UPDATE_DATE = UPDATEDATE, UPDATE_BY = :NEW.SCANNER_ID    
        WHERE ID_NO = :NEW.IDNO;
       WHEN EVENT_RAISEDDATECOLUMN = 'MQ_LINE_START_DATE' 
       THEN 
        UPDATE PROD_MONITOR SET LOCATION_STATUS = NEXT_STATE_RULE,MQ_LINE_START_DATE=SCANTIME, 
        UPDATE_DATE = UPDATEDATE, UPDATE_BY = :NEW.SCANNER_ID    
        WHERE ID_NO = :NEW.IDNO; 
        
        WHEN EVENT_RAISEDDATECOLUMN = 'MQ_LINE_END_DATE' 
       THEN 
        UPDATE PROD_MONITOR SET LOCATION_STATUS = NEXT_STATE_RULE,MQ_LINE_END_DATE=SCANTIME, 
        UPDATE_DATE = UPDATEDATE, UPDATE_BY = :NEW.SCANNER_ID  
        WHERE ID_NO = :NEW.IDNO; 

       WHEN EVENT_RAISEDDATECOLUMN = 'REWORK_AFTER_MQ_START_DATE' 
       THEN 
        UPDATE PROD_MONITOR SET LOCATION_STATUS = NEXT_STATE_RULE,REWORK_AFTER_MQ_START_DATE=SCANTIME, 
        UPDATE_DATE = UPDATEDATE, UPDATE_BY = :NEW.SCANNER_ID    
        WHERE ID_NO = :NEW.IDNO;
 
       WHEN EVENT_RAISEDDATECOLUMN = 'REWORK_AFTER_MQ_END_DATE' 
       THEN 
        UPDATE PROD_MONITOR SET LOCATION_STATUS = NEXT_STATE_RULE,REWORK_AFTER_MQ_END_DATE=SCANTIME, 
        UPDATE_DATE = UPDATEDATE, UPDATE_BY = :NEW.SCANNER_ID    
        WHERE ID_NO = :NEW.IDNO; 
        
         WHEN EVENT_RAISEDDATECOLUMN = 'PRODUCTION_END_DATE' 
       THEN 
        UPDATE PROD_MONITOR SET LOCATION_STATUS = NEXT_STATE_RULE,PRODUCTION_END_DATE=SCANTIME, 
        UPDATE_DATE = UPDATEDATE, UPDATE_BY = :NEW.SCANNER_ID  
        WHERE ID_NO = :NEW.IDNO; 
 
       WHEN EVENT_RAISEDDATECOLUMN = 'INSPECTION_START_DATE' 
       THEN 
        UPDATE PROD_MONITOR SET LOCATION_STATUS = NEXT_STATE_RULE,INSPECTION_START_DATE=SCANTIME, 
        UPDATE_DATE = UPDATEDATE, UPDATE_BY = :NEW.SCANNER_ID    
        WHERE ID_NO = :NEW.IDNO;
 
       WHEN EVENT_RAISEDDATECOLUMN = 'INSPECTION_END_DATE' 
       THEN 
        UPDATE PROD_MONITOR SET LOCATION_STATUS = NEXT_STATE_RULE,INSPECTION_END_DATE=SCANTIME, 
        UPDATE_DATE = UPDATEDATE, UPDATE_BY = :NEW.SCANNER_ID    
        WHERE ID_NO = :NEW.IDNO; 
        
         WHEN EVENT_RAISEDDATECOLUMN = 'REWORK_DUR_INSP_START_DATE' 
       THEN 
        UPDATE PROD_MONITOR SET LOCATION_STATUS = NEXT_STATE_RULE,REWORK_DUR_INSP_START_DATE=SCANTIME, 
        UPDATE_DATE = UPDATEDATE, UPDATE_BY = :NEW.SCANNER_ID    
        WHERE ID_NO = :NEW.IDNO;
 
       WHEN EVENT_RAISEDDATECOLUMN = 'REWORK_DUR_INSP_END_DATE' 
       THEN 
        UPDATE PROD_MONITOR SET LOCATION_STATUS = NEXT_STATE_RULE,REWORK_DUR_INSP_END_DATE=SCANTIME, 
        UPDATE_DATE = UPDATEDATE, UPDATE_BY = :NEW.SCANNER_ID    
        WHERE ID_NO = :NEW.IDNO; 


        WHEN EVENT_RAISEDDATECOLUMN = 'SHIPPING_STATUS' AND CURRENT_STATE_PM = 11 and NEXT_STATE_RULE = 12 THEN
              UPDATE HUBADMIN.PROD_MONITOR SET LOCATION_STATUS = NEXT_STATE_RULE, SHIPPING_STATUS='O', 
              UPDATE_DATE = UPDATEDATE, UPDATE_BY = :NEW.SCANNER_ID
              WHERE ID_NO = :NEW.IDNO;                  
     
          WHEN EVENT_RAISEDDATECOLUMN = 'SHIPPING_STATUS' AND CURRENT_STATE_PM = 12 AND NEXT_STATE_RULE = 13 THEN
              UPDATE HUBADMIN.PROD_MONITOR SET LOCATION_STATUS = NEXT_STATE_RULE, SHIPPING_STATUS='F', 
              UPDATE_DATE = UPDATEDATE, UPDATE_BY = :NEW.SCANNER_ID
              WHERE ID_NO = :NEW.IDNO;   
              
          WHEN EVENT_RAISEDDATECOLUMN = 'SHIPPING_STATUS' AND CURRENT_STATE_PM=13 AND NEXT_STATE_RULE = 12 THEN
              UPDATE HUBADMIN.PROD_MONITOR SET LOCATION_STATUS = NEXT_STATE_RULE, SHIPPING_STATUS='O', 
              UPDATE_DATE = UPDATEDATE, UPDATE_BY = :NEW.SCANNER_ID
              WHERE ID_NO = :NEW.IDNO;      
   
          WHEN EVENT_RAISEDDATECOLUMN = 'SHIPPING_STATUS' AND CURRENT_STATE_PM=12 AND NEXT_STATE_RULE = 11 THEN
              UPDATE HUBADMIN.PROD_MONITOR SET LOCATION_STATUS = NEXT_STATE_RULE, SHIPPING_STATUS='I', 
              UPDATE_DATE = UPDATEDATE, UPDATE_BY = :NEW.SCANNER_ID
              WHERE ID_NO = :NEW.IDNO;      
     
          WHEN EVENT_RAISEDDATECOLUMN = 'SHIPPING_STATUS' AND CURRENT_STATE_PM=12 AND NEXT_STATE_RULE = 14 THEN
              UPDATE HUBADMIN.PROD_MONITOR SET LOCATION_STATUS = NEXT_STATE_RULE, SHIPPING_STATUS='S', SHIPPING_DATE = UPDATEDATE, 
              UPDATE_DATE = UPDATEDATE, UPDATE_BY = :NEW.SCANNER_ID
              WHERE ID_NO = :NEW.IDNO;  
     
     
          WHEN EVENT_RAISEDDATECOLUMN = 'SHIPPING_STATUS' AND NEXT_STATE_RULE = 15 THEN
              UPDATE HUBADMIN.PROD_MONITOR SET LOCATION_STATUS = NEXT_STATE_RULE, SHIPPING_STATUS='S', SHIPPING_DATE = UPDATEDATE, 
              UPDATE_DATE = UPDATEDATE, UPDATE_BY = :NEW.SCANNER_ID
              WHERE ID_NO = :NEW.IDNO;    



      
       END CASE;  
  ELSE
    NULL;
  END IF;  

EXCEPTION
WHEN PROGRAM_ERROR THEN
  DBMS_OUTPUT.PUT_LINE('  ****ERROR - Unexpected error occurred**** ');
WHEN NO_DATA_FOUND THEN
  DBMS_OUTPUT.PUT_LINE('  ****ERROR - No data found**** ');
END;
/
ALTER TRIGGER "HUBADMIN"."UPDATE_PROD_MONITOR_STATE" ENABLE;
